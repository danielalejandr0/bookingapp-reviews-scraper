{"version":3,"sources":["Components/ReviewContainer/ReviewContainer.module.css","Components/ReviewContainer/ReviewCard/ReviewCard.module.css","Components/ReviewContainer/ReviewCard/ReviewCard.js","Components/ReviewContainer/ReviewContainer.js","Components/InputURL/InputUrl.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","ReviewCard","props","className","classes","card","id","author","text","ReviewContainer","useState","reviewData","recievedProps","setRecievedProps","processedData","setProcessedData","incomingData","useEffect","flat","console","log","container","map","review","InputUrl","enterURL","setEnterURL","data","setData","apiData","onSubmit","e","a","preventDefault","fetch","method","headers","body","JSON","stringify","key1","then","response","ok","Error","status","json","resdata","push","catch","error","type","name","value","placeholder","input","onChange","inputValue","target","toString","onPaste","clipboardData","getData","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8IACAA,EAAOC,QAAU,CAAC,UAAY,qC,gBCA9BD,EAAOC,QAAU,CAAC,KAAO,2B,qNCaVC,EAXI,SAACC,GAEhB,OAEI,sBAAKC,UAAWC,IAAQC,KAAxB,UACI,qBAAKC,GAAG,SAAR,SAAkBJ,EAAMK,SACxB,qBAAKD,GAAG,OAAR,SAAgBJ,EAAMM,WCmClBC,EAlCS,SAACP,GAAW,IAAD,EAEUQ,mBAASR,EAAMS,YAFzB,mBAEzBC,EAFyB,KAEVC,EAFU,OAGUH,mBAAS,IAHnB,mBAGzBI,EAHyB,KAGVC,EAHU,KAI5BC,EAAed,EAAMS,WAIzBM,qBAAU,WAENJ,EAAiBG,GACjBD,EAAiBC,EAAaE,QAC9BC,QAAQC,IAAIN,EAAcI,QAC1BC,QAAQC,IAAIN,KACb,CAACF,EAAeI,IAUnB,OACI,qBAAKb,UAAWC,IAAQiB,UAAxB,SAEMP,EAAcQ,KAAI,SAACC,GAAa,OAAO,cAAC,EAAD,CAAYhB,OAAQgB,EAAOhB,OAAQC,KAAMe,EAAOf,aCkDtFgB,EA/EE,SAACtB,GAAW,IAAD,EAEQQ,mBAAS,IAFjB,mBAEjBe,EAFiB,KAEPC,EAFO,OAGAhB,mBAAS,IAHT,mBAGjBiB,EAHiB,KAGXC,EAHW,KAIpBC,EAAU,GAEdZ,qBAAU,WACNE,QAAQC,IAAI,mBACb,CAACO,IAGJ,IAeMG,EAAQ,uCAAG,WAAeC,GAAf,SAAAC,EAAA,6DACbD,EAAEE,iBADW,SAEPC,MAAM,gCAAiC,CACzCC,OAAQ,OACRC,QAAS,CACL,OAAW,mBACX,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAU,CAACC,KAAMf,MAE/BgB,MAAK,SAAAC,GACF,IAAIA,EAASC,GACT,MAAMC,MAAMF,EAASG,QAEzB,OAAOH,KAEVD,MAAK,SAAAC,GACF,OAAOA,EAASI,UAEnBL,MAAK,SAAAM,GACFlB,EAAQmB,KAAKD,GAEbnB,EAAQC,MAEXoB,OAAM,SAASC,GACZ/B,QAAQC,IAAI8B,MAzBH,2CAAH,sDAmCV,OACI,gCACI,4DACA,uBAAMpB,SAAUA,EAAhB,UACI,uBACIqB,KAAK,OAAOC,KAAK,WACjBC,MAAO5B,EACP6B,YAAY,wBACZnD,UAAWC,IAAQmD,MACnBC,SA3DH,SAACzB,GACd,IAAM0B,EAAa1B,EAAE2B,OAAOL,MAAMM,WAClCjC,EAAY+B,IA0DIG,QAvDH,SAAC7B,GACEA,EAAE8B,cAAcC,QAAQ,QAGpCpC,GAAY,WAAO,MAAO,CAACD,SAoDnB,wBAAQ0B,KAAK,SAAb,yBAEJ,cAAC,EAAD,CAAiBxC,WAAYgB,QCrE9BoC,MARf,WACE,OACE,qBAAK5D,UAAU,MAAf,SACE,cAAC,EAAD,OCIS6D,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBzB,MAAK,YAAkD,IAA/C0B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.58688163.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ReviewContainer_container__9igQm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"ReviewCard_card__2Or2P\"};","import React from 'react'; \r\nimport classes from './ReviewCard.module.css'; \r\n\r\nconst ReviewCard = (props) => {\r\n\r\n    return (\r\n\r\n        <div className={classes.card}>  \r\n            <div id=\"author\">{props.author}</div>   \r\n            <div id=\"text\">{props.text}</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ReviewCard;","\r\nimport React, {useState, useEffect, useRef} from 'react';\r\nimport classes from './ReviewContainer.module.css'; \r\nimport ReviewCard from './ReviewCard/ReviewCard'; \r\n\r\n// state is if props recieved\r\n// make a reference of state after the props are recieved \r\n// evaluate variabes based on the referrenced state \r\n\r\n\r\n const ReviewContainer = (props) => {\r\n\r\n    const [recievedProps, setRecievedProps] = useState(props.reviewData); \r\n    const [processedData, setProcessedData] = useState([]); \r\n    let incomingData = props.reviewData\r\n \r\n    // console.log(incomingData)\r\n     \r\n    useEffect(() => {\r\n        \r\n        setRecievedProps(incomingData);\r\n        setProcessedData(incomingData.flat());\r\n        console.log(processedData.flat()); \r\n        console.log(processedData)\r\n    }, [recievedProps, incomingData]); \r\n\r\n\r\n\r\n    const renderList = () => {\r\n        return  processedData.map((review) => {\r\n            <ReviewCard author={review.author} text={review.text} />\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div className={classes.container}>\r\n\r\n            { processedData.map((review) => { return <ReviewCard author={review.author} text={review.text} /> })\r\n            } \r\n \r\n        </div>  \r\n    )   \r\n }\r\n\r\n export default ReviewContainer","\r\n// // component will handle user URl input & fetch data\r\n\r\nimport React, {useState, useEffect } from 'react';\r\nimport classes from \"./InputUrl.module.css\";\r\nimport ReviewContainer from \"../ReviewContainer/ReviewContainer\"\r\n \r\n\r\nconst InputUrl = (props) => {\r\n\r\n    const [enterURL, setEnterURL] = useState(''); \r\n    const [data, setData] = useState([]); \r\n    let apiData = []; \r\n\r\n    useEffect(()=>{\r\n        console.log(\"re-renderring\")\r\n    }, [data])\r\n\r\n\r\n    const onChange = (e)=> {\r\n        const inputValue = e.target.value.toString()\r\n        setEnterURL(inputValue)\r\n    }; \r\n\r\n    const onPaste =  (e) => {\r\n        const pasted = (e.clipboardData.getData('text'));\r\n        const addURL = () => {\r\n            // set Enter URL has to be performed inside a callback\r\n            setEnterURL(() => {return [enterURL]})\r\n        }\r\n        addURL();\r\n    }; \r\n      \r\n       \r\n    const onSubmit = async function(e) {\r\n        e.preventDefault();\r\n        await fetch('http://localhost:3000/reviews', { \r\n            method: 'post', \r\n            headers: {\r\n                'Accept' : 'application/JSON',\r\n                'Content-Type': 'application/JSON',\r\n            },\r\n            body: JSON.stringify({key1: enterURL})\r\n        })\r\n        .then(response => {\r\n            if(!response.ok) {\r\n                throw Error(response.status)\r\n            }\r\n            return response\r\n        }) \r\n        .then(response => {\r\n            return response.json()  \r\n        })\r\n        .then(resdata => {\r\n            apiData.push(resdata);\r\n            // console.log(apiData);\r\n            setData(apiData)   \r\n        })\r\n        .catch(function(error){\r\n            console.log(error)\r\n        }); \r\n         \r\n        // setData((prevState) => {\r\n        //     return [prevState, apiData]\r\n        // }); \r\n    };   \r\n    \r\n    // console.log(data)\r\n\r\n        return (\r\n            <div>\r\n                <h1>Booksy Reviews Scraper App</h1>\r\n                <form onSubmit={onSubmit} > \r\n                    <input \r\n                        type=\"text\" name=\"URLInput\" \r\n                        value={enterURL}\r\n                        placeholder=\"Paste your Booksy URL\" \r\n                        className={classes.input}\r\n                        onChange={onChange}\r\n                        onPaste={onPaste} />\r\n                    <button type=\"submit\"> submit </button>\r\n                </form>\r\n                <ReviewContainer reviewData={data}></ReviewContainer>   \r\n            </div>\r\n        ) \r\n}\r\n\r\nexport default InputUrl ","// import logo from './logo.svg';\n\nimport './App.css';\nimport InputUrl from './Components/InputURL/InputUrl'; \n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <InputUrl />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}